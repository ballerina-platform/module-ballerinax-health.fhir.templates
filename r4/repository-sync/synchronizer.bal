// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This file is auto-generated by Ballerina Team for managing utility functions.
// It should not be modified by hand.

import ballerina/log;
import ballerina/time;

import ballerinax/health.clients.fhir;
import ballerinax/health.fhir.r4;

# Synchronize fhir repository using fhir bundle transactions
#
# + lastInvocation - Last invocation time of the scheduler in Utc  
# + now - Current invocation time of the scheduler in Utc
# + return - error if unsuccessful
function synchronizeFhirRepository(time:Utc lastInvocation, time:Utc now) returns error? {
    r4:FHIRResourceEntity[] recentlyUpdatedResources = check fetchRecentlyUpdatedResources(lastInvocation, now);

    r4:BundleEntry[] bundleEntry = [];

    // Transform r4:FHIRResourceEntity to r4:BundleEntry
    check prepareBundleEntry(bundleEntry, recentlyUpdatedResources, r4:PUT);

    map<r4:BundleEntry[]> processedBundleEntries = check processAndReturnBundleEntries(bundleEntry);

    // Do fhir transactions
    foreach r4:BundleEntry[] bundleEntryItem in processedBundleEntries {
        // Prepare r4:Bundle
        r4:Bundle bundleItem = {
            'type: r4:BUNDLE_TYPE_TRANSACTION,
            entry: bundleEntryItem
        };

        do {
            fhir:FHIRResponse result = check fhirr4Client->'transaction(bundleItem.toJson());
            json resourceId = check result.'resource.id;
            json resourceType = check result.'resource.resourceType;
            log:printInfo(string `SUCCESSFUL FHIR Bundle Transaction, resourceType: ${resourceType.toString()}, id: ${resourceId.toString()}`);
        } on fail error e {
            log:printError(string `ERROR occured while FHIR Bundle Transaction`, e);
        }
    }
}

# Prepare r4:BundleEntry[] for fhir transaction
#
# + bundleEntry - Input r4:BundleEntry[]  
# + entities - Fhir resources for transaction payload
# + method - Fhir interaction type
# + return - Prepared r4:BundleEntry[] for fhir transaction
function prepareBundleEntry(r4:BundleEntry[] bundleEntry, r4:FHIRResourceEntity[] entities, r4:HTTPVerb method) returns error? {
    foreach r4:FHIRResourceEntity entity in entities {
        json 'resource = check entity.toJson();

        r4:BundleEntry entry = {
            'resource: 'resource
        };

        string resourceType = check 'resource.resourceType;
        string id = check 'resource.id;

        entry.request = {
            method: method,
            url: string `${resourceType}/${id}`
        };

        bundleEntry.push(entry);
    }
}
